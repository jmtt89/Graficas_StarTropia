#include "../include/Camara.h"#include <math.h>Camara::Camara(Jugador *Nave){    this->width  = 800.0f;    this->height = 600.0f;    this->Lx = Nave->x;    this->Ly = Nave->y;    this->Lz = Nave->z;    this->Px = 0 ;    this->Py = 0 ;    this->Pz = 0 ;    this->Ux = 0;    this->Uy = 1;    this->Uz = 0;            this->Aperture = 35.0f;    this->Aspect = width/height;    this->pCerca = 1;    this->pLejos = 800;	            this->lighting = false;    this->color_material = false;    this->configuracion_3D();}void Camara::configuracion_3D( void ) {    glClearColor( 0.0f, 0.0f, 0.0f, 1.0f );     // Borrado del Buffer Color.    glClearDepth( 1.0f );                       // Borrado del Buffer Depth    glDepthFunc( GL_LEQUAL );                   // Función de Borrado Buffer Depth   	glEnable(GL_DEPTH_TEST);                    // Activamos el Test de Profundidad.    glFrontFace( GL_CCW );                      // GL_CCW   o GL_CW.    glCullFace( GL_BACK );                      // GL_FRONT o GL_BACK.    glEnable( GL_CULL_FACE );                   // NO DIBUJA LAS CARAS TRASERAS    glShadeModel( GL_SMOOTH );                  // Activamos el Sombreado Suave, (GL_FLAT) Plano.    glPolygonMode( GL_FRONT_AND_BACK, GL_FILL); //  GL_FILL, GL_LINE y GL_POINT    glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST );    glViewport( 0, 0, width, height );          // Define la Ventana de visualizado.    glMatrixMode(GL_PROJECTION);                // Selecciona la Matriz de Proyección.    glLoadIdentity();                           // Reemplaza la matriz.     this->Perspective();    glMatrixMode(GL_MODELVIEW);                 // Selecciona la Matriz de Modelado.    glLoadIdentity();                           // Reemplaza la matriz.    // Configuración de Transparencias -------------------------------------------    glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );    glAlphaFunc( GL_GREATER, 0.5f );    // -- Agregamos niebla -------------------------------------------------------    colorNiebla[0] = 0.0f; colorNiebla[1] = 0.0f; colorNiebla[2] = 0.0f; colorNiebla[3] = 1.0f;    glFogi ( GL_FOG_MODE, GL_LINEAR );   // GL_LINEAR, GL_EXP, GL_EXP2    glFogf ( GL_FOG_DENSITY, 0.5f    );  // 1.0f - 0.036f    glFogf ( GL_FOG_START,   80.0f   );  // 0.0f    glFogf ( GL_FOG_END,     100.0f   );  // 1.0f    glFogfv( GL_FOG_COLOR, colorNiebla );    glDisable( GL_FOG );    glEnable( GL_COLOR_MATERIAL );    glDisable( GL_LIGHTING );    glDisable( GL_LIGHT0 );    glDisable( GL_LIGHT1 );    glDisable( GL_LIGHT2 );    glDisable( GL_LIGHT3 );    glDisable( GL_LIGHT4 );      glDisable( GL_LIGHT5 );        glDisable( GL_LIGHT6 );        glDisable( GL_LIGHT7 );       glEnable(GL_LIGHTING);    glEnable(GL_FOG);        glEnable(GL_NORMALIZE);}Camara::~Camara(){	}void Camara::Update(Jugador *Nave){	    this->Lx = Nave->x ;    this->Ly = Nave->y ;    this->Lz = Nave->z ;    this->Px = Nave->x ;    this->Py = Nave->y + 1.0f ;    this->Pz = Nave->z + 6.0f ;}void Camara::Begin(){	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	glMatrixMode(GL_MODELVIEW);	glLoadIdentity();//	glClearColor(0.0f, 0.0f, 0.0f ,1.0f);    gluLookAt(this->Px,this->Py,this->Pz,  //Pos	          this->Lx,this->Ly,this->Lz,  //Look              this->Ux,this->Uy,this->Uz); ///Up}void Camara::End(){    glFlush();}void Camara::Draw_Zero(){	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	glMatrixMode(GL_MODELVIEW);	glLoadIdentity();    gluLookAt(0,1,6,  //Pos	          0,0,0,  //Look              this->Ux,this->Uy,this->Uz); ///Up}void Camara::Keyboard(unsigned char k){    switch (k){        default:            break;    }}void Camara::Reshape(int w, int h){    this->width  = w;    this->height = h;    glMatrixMode(GL_PROJECTION);    glLoadIdentity();        glViewport(0, 0, w, h);    this->Aspect = (float) w / (float) h;    gluPerspective(this->Aperture, this->Aspect, this->pCerca, this->pLejos);}void Camara::Perspective(){   gluPerspective(this->Aperture, this->Aspect, this->pCerca, this->pLejos);}void Camara::Begin_Ortho2D(){  color_material = glIsEnabled( GL_COLOR_MATERIAL );  lighting       = glIsEnabled( GL_LIGHTING );  glEnable( GL_COLOR_MATERIAL );  glDisable( GL_LIGHTING );  glMatrixMode( GL_PROJECTION );  glPushMatrix( );               // -- Guarda la Matriz de Proyección --  glLoadIdentity( );  glOrtho( 0, width, 0, height, -1, 1 ); // -- Cambia a modo ortogáfico --  glMatrixMode( GL_MODELVIEW );  glPushMatrix( );              // -- Guarda la Matriz de Modelado --  glLoadIdentity( );  glEnable( GL_TEXTURE_2D );  glDisable( GL_DEPTH_TEST );}void Camara::End_Ortho2D(){  glEnable( GL_DEPTH_TEST );  glDisable( GL_TEXTURE_2D );   glMatrixMode( GL_PROJECTION );  glPopMatrix( );                // -- Restaura la Matriz de Proyección --  glMatrixMode( GL_MODELVIEW );  glPopMatrix( );                // -- Restaura la Matriz de Modelado --  if ( !color_material )     glDisable( GL_COLOR_MATERIAL );  if (  lighting       )    glEnable(  GL_LIGHTING );  }